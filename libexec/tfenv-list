#!/usr/bin/env bash

set -uo pipefail;

# Ensure we can execute standalone
if [ -n "${TFENV_ROOT:-""}" ]; then
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT already defined as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT already defined as ${TFENV_ROOT}";
  fi;
else
  export TFENV_ROOT="$(cd "$(dirname "${0}")/.." && pwd)";
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT declared as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT declared as ${TFENV_ROOT}";
  fi;
fi;

if [ -n "${TFENV_HELPERS:-""}" ]; then
  log 'debug' 'TFENV_HELPERS is set, not sourcing helpers again';
else
  [ "${TFENV_DEBUG:-0}" -gt 1 ] && echo "[DEBUG] Sourcing helpers from ${TFENV_ROOT}/lib/helpers.sh";
  if source "${TFENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    echo "[ERROR] Failed to source helpers from ${TFENV_ROOT}/lib/helpers.sh" >&2;
    exit 1;
  fi;
fi;

[ "${#}" -ne 0 ] \
  && log 'error' "usage: tfenv list"

[ -d "${TFENV_ROOT}/versions" ] \
  || log 'error' 'No versions available. Please install one with: tfenv install'

[[ -x "${TFENV_ROOT}/versions" && -r "${TFENV_ROOT}/versions" ]] \
  || log 'error' "tfenv versions directory is inaccessible: ${TFENV_ROOT}/versions";

version_name="$(tfenv-version-name | tail -n1)" \
  && log 'debug' "tfenv-version-name reported: ${version_name}" \
  || log 'error' "tfenv-version-name failed";
export version_name;

export version_file="$(tfenv-version-file | tail -n1)" \
  && log 'debug' "tfenv-version-file reported: ${version_file}" \
  || log 'error' "tfenv-version-file failed";
export version_file;

print_version () {
  if [ "${1}" == "${version_name}" ]; then
    echo "* ${1} (set by ${version_file})";
  else
    echo "  ${1}";
  fi;
};

log 'debug' 'Listing versions...';
local_versions=($(ls -1 "${TFENV_ROOT}/versions" \
  | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3));

log 'debug' "Local versions: ${local_versions[@]}";

log 'debug' 'Printing versions...';
for local_version in ${local_versions[@]}; do
  print_version "${local_version}";
done;
