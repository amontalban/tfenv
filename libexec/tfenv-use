#!/usr/bin/env bash

set -uo pipefail;

# Ensure we can execute standalone
if [ -n "${TFENV_ROOT:-""}" ]; then
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT already defined as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT already defined as ${TFENV_ROOT}" >&2;
  fi;
else
  export TFENV_ROOT="$(cd "$(dirname "${0}")/.." && pwd)";
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT declared as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT declared as ${TFENV_ROOT}" >&2;
  fi;
fi;

if [ -n "${TFENV_HELPERS:-""}" ]; then
  log 'debug' 'TFENV_HELPERS is set, not sourcing helpers again';
else
  [ "${TFENV_DEBUG:-0}" -gt 1 ] && echo "[DEBUG] Sourcing helpers from ${TFENV_ROOT}/lib/helpers.sh" >&2;
  if source "${TFENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    echo "[ERROR] Failed to source helpers from ${TFENV_ROOT}/lib/helpers.sh" >&2;
    exit 1;
  fi;
fi;

[ "${#}" -ne 1 ] && log 'error' "usage: tfenv use <version>"

declare version_requested version regex min_required version_file;

version_requested="${1}";

if [[ "${version_requested}" =~ ^min-required$ ]]; then
  log 'info' 'Detecting minimum required version...';
  min_required="$(tfenv-min-required | tail -n1)" \
    || log 'error' 'tfenv-min-required failed';

  log 'info' "Minimum required version detected: ${min_required}";
  version_requested="${min_required}";
fi;

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}";
  regex="${version_requested##*\:}";
  log 'debug' "Version uses latest keyword with regex: ${regex}";
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}";
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$";
  log 'debug' "Version uses latest keyword alone. Forcing regex to match stable versions only: ${regex}";
else
  version="${version_requested}";
  regex="^${version_requested}$";
  log 'debug' "Version is explicit: ${version}. Regex enforces the version: ${regex}";
fi;

[ -d "${TFENV_ROOT}/versions" ] \
  || log 'error' "No versions of terraform installed. Please install one with: tfenv install"

log 'debug' "Searching ${TFENV_ROOT}/versions for latest version matching ${regex}";
version="$(\ls "${TFENV_ROOT}/versions" \
  | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
  | grep -e "${regex}" \
  | head -n 1
)"

[ -n "${version}" ] \
  && log 'debug' "Found version: ${version}" \
  || log 'error' "No installed versions of terraform matched '${1}'";

target_path="${TFENV_ROOT}/versions/${version}";
[ -f "${target_path}/terraform" ] \
  || log 'error' "Version directory for ${version} is present, but the terraform binary is not! Manual intervention required.";
[ -x "${target_path}/terraform" ] \
  || log 'error' "Version directory for ${version} is present, but the terraform binary is not executable! Manual intervention required. ";

log 'info' "Switching to v${version}";

version_file="$(tfenv-version-file | tail -n1)";
log 'debug' "Writing \"${version}\" to \"${version_file}\"";
echo "${version}" > "${version_file}" \
  || log 'error' "Switch to v${version} failed";

terraform --version 1>/dev/null \
  || log 'error' "'terraform --version' failed. Something is seriously wrong";
log 'info' "Switching completed";
