#!/usr/bin/env bash
# Summary: Show the currently-selected terraform version

set -uo pipefail;

# Ensure we can execute standalone
if [ -n "${TFENV_ROOT:-""}" ]; then
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT already defined as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT already defined as ${TFENV_ROOT}" >&2;
  fi;
else
  export TFENV_ROOT="$(cd "$(dirname "${0}")/.." && pwd)";
  if [ "${TFENV_DEBUG:-0}" -gt 1 ]; then
    [ -n "${TFENV_HELPERS:-""}" ] \
      && log 'debug' "TFENV_ROOT declared as ${TFENV_ROOT}" \
      || echo "[DEBUG] TFENV_ROOT declared as ${TFENV_ROOT}" >&2;
  fi;
fi;

if [ -n "${TFENV_HELPERS:-""}" ]; then
  log 'debug' 'TFENV_HELPERS is set, not sourcing helpers again';
else
  [ "${TFENV_DEBUG:-0}" -gt 1 ] && echo "[DEBUG] Sourcing helpers from ${TFENV_ROOT}/lib/helpers.sh" >&2;
  if source "${TFENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    echo "[ERROR] Failed to source helpers from ${TFENV_ROOT}/lib/helpers.sh" >&2;
    exit 1;
  fi;
fi;

[ -d "${TFENV_ROOT}/versions" ] \
  || log 'error' "No versions of terraform installed. Please install one with: tfenv install"

TFENV_VERSION_FILE="$(tfenv-version-file | tail -n1)" \
  && log 'debug' "TFENV_VERSION_FILE retrieved from tfenv-version-file: ${TFENV_VERSION_FILE}" \
  || log 'error' 'Failed to retrieve TFENV_VERSION_FILE from tfenv-version-file';
TFENV_VERSION="$(cat "${TFENV_VERSION_FILE}" || true)" \
  && log 'debug' "TFENV_VERSION specified in TFENV_VERSION_FILE: ${TFENV_VERSION}";
if [[ "${TFENV_VERSION}" =~ ^latest.*$ ]]; then
echo foo
  log 'debug' 'TFENV_VERSION uses "latest" keyword';
  if [[ "${TFENV_VERSION}" =~ ^latest\:.*$ ]]; then
    regex="${TFENV_VERSION##*\:}";
    log 'debug' "\"latest\" keyword uses regex: ${regex}";
  fi;
  version="$(\ls "${TFENV_ROOT}/versions" \
    | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
    | grep -e "${regex}" \
    | head -n 1)";
  if [ -n "${version}" ]; then
    log 'debug' "Version selected: ${version}";
    TFENV_VERSION="${version}"
  else
    log 'error' "No installed versions of terraform matched '${TFENV_VERSION}'";
  fi;
else
  log 'debug' 'TFENV_VERSION does not use "latest" keyword';
fi;

[ -z "${TFENV_VERSION}" ] \
  && log 'error' "Version could not be resolved (set by ${TFENV_VERSION_FILE} or tfenv use <version>)";

if [ -d "${TFENV_ROOT}/versions/${TFENV_VERSION}" ]; then
  echo "${TFENV_VERSION}";
else
  log 'error' "version '${TFENV_VERSION}' is not installed (set by ${TFENV_VERSION_FILE})";
fi;
